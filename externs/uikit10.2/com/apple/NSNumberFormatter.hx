package com.apple;

import cpp.objc.NSString;
import cpp.objc.NSDictionary;
import haxe.Int64;

@:objc
@:native("NSNumberFormatter")
@:include("UIKit/UIKit.h")
extern class NSNumberFormatter
extends NSFormatter
{
  @:native("setTextAttributesForNegativeValues") public function setTextAttributesForNegativeValues(textAttributesForNegativeValues:Dynamic /*Dynamic*/):Dynamic /*Void*/;
  @:native("setTextAttributesForNotANumber") public function setTextAttributesForNotANumber(textAttributesForNotANumber:Dynamic /*Dynamic*/):Dynamic /*Void*/;
  @:native("negativeSuffix") public function negativeSuffix():NSString;
  @:native("setMaximumFractionDigits") public function setMaximumFractionDigits(maximumFractionDigits:Int):Dynamic /*Void*/;
  @:native("defaultFormatterBehavior") public static function defaultFormatterBehavior():NSNumberFormatterBehavior;
  @:native("positivePrefix") public function positivePrefix():NSString;
  @:native("decimalSeparator") public function decimalSeparator():NSString;
  @:native("textAttributesForPositiveInfinity") public function textAttributesForPositiveInfinity():Dynamic /*Dynamic*/;
  @:native("localizedStringFromNumber:numberStyle") public static function localizedStringFromNumber_numberStyle(num:NSNumber, nstyle:NSNumberFormatterStyle):NSString;
  @:native("nilSymbol") public function nilSymbol():NSString;
  @:native("isLenient") public function isLenient():Dynamic /*Bool*/;
  @:native("positiveFormat") public function positiveFormat():NSString;
  @:native("setTextAttributesForNil") public function setTextAttributesForNil(textAttributesForNil:Dynamic /*Dynamic*/):Dynamic /*Void*/;
  @:native("setLocale") public function setLocale(locale:NSLocale):Dynamic /*Void*/;
  @:native("isPartialStringValidationEnabled") public function isPartialStringValidationEnabled():Dynamic /*Bool*/;
  @:native("generatesDecimalNumbers") public function generatesDecimalNumbers():Dynamic /*Bool*/;
  @:native("setAllowsFloats") public function setAllowsFloats(allowsFloats:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("currencySymbol") public function currencySymbol():NSString;
  @:native("format") public function format():NSString;
  @:native("setGroupingSeparator") public function setGroupingSeparator(groupingSeparator:NSString):Dynamic /*Void*/;
  @:native("setFormatWidth") public function setFormatWidth(formatWidth:Int):Dynamic /*Void*/;
  @:native("setExponentSymbol") public function setExponentSymbol(exponentSymbol:NSString):Dynamic /*Void*/;
  @:native("setCurrencyGroupingSeparator") public function setCurrencyGroupingSeparator(currencyGroupingSeparator:NSString):Dynamic /*Void*/;
  @:native("zeroSymbol") public function zeroSymbol():NSString;
  @:native("roundingIncrement") public function roundingIncrement():NSNumber;
  @:native("notANumberSymbol") public function notANumberSymbol():NSString;
  @:native("alwaysShowsDecimalSeparator") public function alwaysShowsDecimalSeparator():Dynamic /*Bool*/;
  @:native("minimumFractionDigits") public function minimumFractionDigits():Int;
  @:native("minusSign") public function minusSign():NSString;
  @:native("exponentSymbol") public function exponentSymbol():NSString;
  @:overload(function():NSNumberFormatter {})
  @:native("autorelease") override public function autorelease():NSFormatter;
  @:native("numberStyle") public function numberStyle():NSNumberFormatterStyle;
  @:native("setUsesGroupingSeparator") public function setUsesGroupingSeparator(usesGroupingSeparator:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("setNegativeFormat") public function setNegativeFormat(negativeFormat:NSString):Dynamic /*Void*/;
  @:native("setTextAttributesForPositiveValues") public function setTextAttributesForPositiveValues(textAttributesForPositiveValues:Dynamic /*Dynamic*/):Dynamic /*Void*/;
  @:native("setAttributedStringForZero") public function setAttributedStringForZero(attributedStringForZero:NSAttributedString):Dynamic /*Void*/;
  @:native("groupingSize") public function groupingSize():Int;
  @:native("positiveInfinitySymbol") public function positiveInfinitySymbol():NSString;
  @:native("setNegativeInfinitySymbol") public function setNegativeInfinitySymbol(negativeInfinitySymbol:NSString):Dynamic /*Void*/;
  @:native("localizesFormat") public function localizesFormat():Dynamic /*Bool*/;
  @:native("locale") public function locale():NSLocale;
  @:native("usesGroupingSeparator") public function usesGroupingSeparator():Dynamic /*Bool*/;
  @:native("minimum") public function minimum():NSNumber;
  @:native("setMaximum") public function setMaximum(maximum:NSNumber):Dynamic /*Void*/;
  @:native("setNotANumberSymbol") public function setNotANumberSymbol(notANumberSymbol:NSString):Dynamic /*Void*/;
  @:native("negativePrefix") public function negativePrefix():NSString;
  @:native("setPlusSign") public function setPlusSign(plusSign:NSString):Dynamic /*Void*/;
  @:native("maximumFractionDigits") public function maximumFractionDigits():Int;
  @:native("setHasThousandSeparators") public function setHasThousandSeparators(hasThousandSeparators:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("allowsFloats") public function allowsFloats():Dynamic /*Bool*/;
  @:native("setCurrencySymbol") public function setCurrencySymbol(currencySymbol:NSString):Dynamic /*Void*/;
  @:native("setAttributedStringForNotANumber") public function setAttributedStringForNotANumber(attributedStringForNotANumber:NSAttributedString):Dynamic /*Void*/;
  @:native("setPaddingCharacter") public function setPaddingCharacter(paddingCharacter:NSString):Dynamic /*Void*/;
  @:native("hasThousandSeparators") public function hasThousandSeparators():Dynamic /*Bool*/;
  @:native("setPerMillSymbol") public function setPerMillSymbol(perMillSymbol:NSString):Dynamic /*Void*/;
  @:native("currencyGroupingSeparator") public function currencyGroupingSeparator():NSString;
  @:native("numberFromString") public function numberFromString(string:NSString):NSNumber;
  @:native("negativeFormat") public function negativeFormat():NSString;
  @:native("textAttributesForPositiveValues") public function textAttributesForPositiveValues():Dynamic /*Dynamic*/;
  @:native("setTextAttributesForPositiveInfinity") public function setTextAttributesForPositiveInfinity(textAttributesForPositiveInfinity:Dynamic /*Dynamic*/):Dynamic /*Void*/;
  @:native("setMinimumIntegerDigits") public function setMinimumIntegerDigits(minimumIntegerDigits:Int):Dynamic /*Void*/;
  @:native("getObjectValue:forString:range:error") public function getObjectValue_forString_range_error(obj:Dynamic /*Dynamic*/, string:NSString, rangep:Dynamic /*_NSRange*/, error:NSError):Dynamic /*Bool*/;
  @:native("currencyDecimalSeparator") public function currencyDecimalSeparator():NSString;
  @:native("setThousandSeparator") public function setThousandSeparator(thousandSeparator:NSString):Dynamic /*Void*/;
  @:native("setFormat") public function setFormat(format:NSString):Dynamic /*Void*/;
  @:native("formattingContext") public function formattingContext():NSFormattingContext;
  @:native("groupingSeparator") public function groupingSeparator():NSString;
  @:native("textAttributesForNegativeInfinity") public function textAttributesForNegativeInfinity():Dynamic /*Dynamic*/;
  @:native("setRoundingMode") public function setRoundingMode(roundingMode:NSNumberFormatterRoundingMode):Dynamic /*Void*/;
  @:native("setCurrencyCode") public function setCurrencyCode(currencyCode:NSString):Dynamic /*Void*/;
  @:native("maximum") public function maximum():NSNumber;
  @:native("setPartialStringValidationEnabled") public function setPartialStringValidationEnabled(partialStringValidationEnabled:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("attributedStringForNil") public function attributedStringForNil():NSAttributedString;
  @:native("alloc") public static function alloc():NSNumberFormatter;
  @:native("setNegativePrefix") public function setNegativePrefix(negativePrefix:NSString):Dynamic /*Void*/;
  @:native("setMinimumSignificantDigits") public function setMinimumSignificantDigits(minimumSignificantDigits:Int):Dynamic /*Void*/;
  @:native("setGroupingSize") public function setGroupingSize(groupingSize:Int):Dynamic /*Void*/;
  @:native("formatterBehavior") public function formatterBehavior():NSNumberFormatterBehavior;
  @:native("secondaryGroupingSize") public function secondaryGroupingSize():Int;
  @:native("setAlwaysShowsDecimalSeparator") public function setAlwaysShowsDecimalSeparator(alwaysShowsDecimalSeparator:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("setPaddingPosition") public function setPaddingPosition(paddingPosition:NSNumberFormatterPadPosition):Dynamic /*Void*/;
  @:native("setAttributedStringForNil") public function setAttributedStringForNil(attributedStringForNil:NSAttributedString):Dynamic /*Void*/;
  @:native("setPositiveFormat") public function setPositiveFormat(positiveFormat:NSString):Dynamic /*Void*/;
  @:native("setMinusSign") public function setMinusSign(minusSign:NSString):Dynamic /*Void*/;
  @:native("setPositiveSuffix") public function setPositiveSuffix(positiveSuffix:NSString):Dynamic /*Void*/;
  @:native("setPositiveInfinitySymbol") public function setPositiveInfinitySymbol(positiveInfinitySymbol:NSString):Dynamic /*Void*/;
  @:native("negativeInfinitySymbol") public function negativeInfinitySymbol():NSString;
  @:native("formatWidth") public function formatWidth():Int;
  @:native("setLenient") public function setLenient(lenient:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("minimumIntegerDigits") public function minimumIntegerDigits():Int;
  @:native("setNilSymbol") public function setNilSymbol(nilSymbol:NSString):Dynamic /*Void*/;
  @:native("plusSign") public function plusSign():NSString;
  @:native("usesSignificantDigits") public function usesSignificantDigits():Dynamic /*Bool*/;
  @:native("setUsesSignificantDigits") public function setUsesSignificantDigits(usesSignificantDigits:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("minimumSignificantDigits") public function minimumSignificantDigits():Int;
  @:native("setMinimumFractionDigits") public function setMinimumFractionDigits(minimumFractionDigits:Int):Dynamic /*Void*/;
  @:native("setInternationalCurrencySymbol") public function setInternationalCurrencySymbol(internationalCurrencySymbol:NSString):Dynamic /*Void*/;
  @:native("multiplier") public function multiplier():NSNumber;
  @:native("setDefaultFormatterBehavior") public static function setDefaultFormatterBehavior(behavior:NSNumberFormatterBehavior):Dynamic /*Void*/;
  @:native("stringFromNumber") public function stringFromNumber(number:NSNumber):NSString;
  @:native("positiveSuffix") public function positiveSuffix():NSString;
  @:native("setSecondaryGroupingSize") public function setSecondaryGroupingSize(secondaryGroupingSize:Int):Dynamic /*Void*/;
  @:native("roundingBehavior") public function roundingBehavior():NSDecimalNumberHandler;
  @:native("setTextAttributesForNegativeInfinity") public function setTextAttributesForNegativeInfinity(textAttributesForNegativeInfinity:Dynamic /*Dynamic*/):Dynamic /*Void*/;
  @:native("setNegativeSuffix") public function setNegativeSuffix(negativeSuffix:NSString):Dynamic /*Void*/;
  @:native("maximumIntegerDigits") public function maximumIntegerDigits():Int;
  @:native("setRoundingBehavior") public function setRoundingBehavior(roundingBehavior:NSDecimalNumberHandler):Dynamic /*Void*/;
  @:native("maximumSignificantDigits") public function maximumSignificantDigits():Int;
  @:native("setMaximumIntegerDigits") public function setMaximumIntegerDigits(maximumIntegerDigits:Int):Dynamic /*Void*/;
  @:native("percentSymbol") public function percentSymbol():NSString;
  @:native("setPercentSymbol") public function setPercentSymbol(percentSymbol:NSString):Dynamic /*Void*/;
  @:native("textAttributesForNegativeValues") public function textAttributesForNegativeValues():Dynamic /*Dynamic*/;
  @:native("setGeneratesDecimalNumbers") public function setGeneratesDecimalNumbers(generatesDecimalNumbers:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("thousandSeparator") public function thousandSeparator():NSString;
  @:native("setPositivePrefix") public function setPositivePrefix(positivePrefix:NSString):Dynamic /*Void*/;
  @:native("roundingMode") public function roundingMode():NSNumberFormatterRoundingMode;
  @:native("attributedStringForZero") public function attributedStringForZero():NSAttributedString;
  @:native("setNumberStyle") public function setNumberStyle(numberStyle:NSNumberFormatterStyle):Dynamic /*Void*/;
  @:native("textAttributesForZero") public function textAttributesForZero():Dynamic /*Dynamic*/;
  @:native("setFormattingContext") public function setFormattingContext(formattingContext:NSFormattingContext):Dynamic /*Void*/;
  @:native("setRoundingIncrement") public function setRoundingIncrement(roundingIncrement:NSNumber):Dynamic /*Void*/;
  @:native("setMaximumSignificantDigits") public function setMaximumSignificantDigits(maximumSignificantDigits:Int):Dynamic /*Void*/;
  @:native("paddingPosition") public function paddingPosition():NSNumberFormatterPadPosition;
  @:native("perMillSymbol") public function perMillSymbol():NSString;
  @:native("setDecimalSeparator") public function setDecimalSeparator(decimalSeparator:NSString):Dynamic /*Void*/;
  @:native("setZeroSymbol") public function setZeroSymbol(zeroSymbol:NSString):Dynamic /*Void*/;
  @:native("textAttributesForNotANumber") public function textAttributesForNotANumber():Dynamic /*Dynamic*/;
  @:native("setCurrencyDecimalSeparator") public function setCurrencyDecimalSeparator(currencyDecimalSeparator:NSString):Dynamic /*Void*/;
  @:native("setLocalizesFormat") public function setLocalizesFormat(localizesFormat:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("setMinimum") public function setMinimum(minimum:NSNumber):Dynamic /*Void*/;
  @:native("internationalCurrencySymbol") public function internationalCurrencySymbol():NSString;
  @:native("setMultiplier") public function setMultiplier(multiplier:NSNumber):Dynamic /*Void*/;
  @:native("attributedStringForNotANumber") public function attributedStringForNotANumber():NSAttributedString;
  @:native("setFormatterBehavior") public function setFormatterBehavior(formatterBehavior:NSNumberFormatterBehavior):Dynamic /*Void*/;
  @:native("currencyCode") public function currencyCode():NSString;
  @:native("setTextAttributesForZero") public function setTextAttributesForZero(textAttributesForZero:Dynamic /*Dynamic*/):Dynamic /*Void*/;
  @:native("textAttributesForNil") public function textAttributesForNil():Dynamic /*Dynamic*/;
  @:native("paddingCharacter") public function paddingCharacter():NSString;
}
