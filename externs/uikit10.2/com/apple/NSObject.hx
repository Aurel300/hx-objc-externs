package com.apple;

import cpp.objc.NSString;
import cpp.objc.NSDictionary;
import haxe.Int64;

@:objc
@:native("NSObject")
@:include("UIKit/UIKit.h")
extern interface NSObject
{
  @:native("URL:resourceDataDidBecomeAvailable") public function URL_resourceDataDidBecomeAvailable(sender:NSURL, newBytes:NSData):Void;
  @:native("URL:resourceDidFailLoadingWithReason") public function URL_resourceDidFailLoadingWithReason(sender:NSURL, reason:NSString):Void;
  @:native("URLResourceDidCancelLoading") public function URLResourceDidCancelLoading(sender:NSURL):Void;
  @:native("URLResourceDidFinishLoading") public function URLResourceDidFinishLoading(sender:NSURL):Void;
  @:native("accessibilityActivate") public function accessibilityActivate():Bool;
  @:native("accessibilityActivationPoint") public function accessibilityActivationPoint():CGPoint;
  @:native("accessibilityAssistiveTechnologyFocusedIdentifiers") public function accessibilityAssistiveTechnologyFocusedIdentifiers():Dynamic;
  @:native("accessibilityCustomActions") public function accessibilityCustomActions():Dynamic;
  @:native("accessibilityCustomRotors") public function accessibilityCustomRotors():Dynamic;
  @:native("accessibilityDecrement") public function accessibilityDecrement():Void;
  @:native("accessibilityElementAtIndex") public function accessibilityElementAtIndex(index:Int):Dynamic;
  @:native("accessibilityElementCount") public function accessibilityElementCount():Int;
  @:native("accessibilityElementDidBecomeFocused") public function accessibilityElementDidBecomeFocused():Void;
  @:native("accessibilityElementDidLoseFocus") public function accessibilityElementDidLoseFocus():Void;
  @:native("accessibilityElementIsFocused") public function accessibilityElementIsFocused():Bool;
  @:native("accessibilityElements") public function accessibilityElements():NSArray;
  @:native("accessibilityElementsHidden") public function accessibilityElementsHidden():Bool;
  @:native("accessibilityFrame") public function accessibilityFrame():CGRect;
  @:native("accessibilityHeaderElements") public function accessibilityHeaderElements():NSArray;
  @:native("accessibilityHint") public function accessibilityHint():NSString;
  @:native("accessibilityIncrement") public function accessibilityIncrement():Void;
  @:native("accessibilityLabel") public function accessibilityLabel():NSString;
  @:native("accessibilityLanguage") public function accessibilityLanguage():NSString;
  @:native("accessibilityNavigationStyle") public function accessibilityNavigationStyle():UIAccessibilityNavigationStyle;
  @:native("accessibilityPath") public function accessibilityPath():UIBezierPath;
  @:native("accessibilityPerformEscape") public function accessibilityPerformEscape():Bool;
  @:native("accessibilityPerformMagicTap") public function accessibilityPerformMagicTap():Bool;
  @:native("accessibilityScroll") public function accessibilityScroll(direction:UIAccessibilityScrollDirection):Bool;
  @:native("accessibilityTraits") public function accessibilityTraits():Dynamic;
  @:native("accessibilityValue") public function accessibilityValue():NSString;
  @:native("accessibilityViewIsModal") public function accessibilityViewIsModal():Bool;
  @:native("addObserver:forKeyPath:options:context") public function addObserver_forKeyPath_options_context(observer:NSObject, keyPath:NSString, options:NSKeyValueObservingOptions, context:Void):Void;
  @:native("allowsWeakReference") public function allowsWeakReference():Bool;
  @:native("attemptRecoveryFromError:optionIndex") public function attemptRecoveryFromError_optionIndex(error:NSError, recoveryOptionIndex:Int):Bool;
  @:native("attemptRecoveryFromError:optionIndex:delegate:didRecoverSelector:contextInfo") public function attemptRecoveryFromError_optionIndex_delegate_didRecoverSelector_contextInfo(error:NSError, recoveryOptionIndex:Int, delegate:Dynamic, didRecoverSelector:String, contextInfo:Void):Void;
  @:native("autoContentAccessingProxy") public function autoContentAccessingProxy():Dynamic;
  @:native("autorelease") public function autorelease():NSObject;
  @:native("awakeAfterUsingCoder") public function awakeAfterUsingCoder(aDecoder:NSCoder):Dynamic;
  @:native("awakeFromNib") public function awakeFromNib():Void;
  @:native("class") public function cls():Dynamic;
  @:native("classForCoder") public function classForCoder():Dynamic;
  @:native("classForKeyedArchiver") public function classForKeyedArchiver():Dynamic;
  @:native("conformsToProtocol") public function conformsToProtocol(aProtocol:Dynamic /*Protocol*/):Bool;
  @:native("copy") public function copy():Dynamic;
  @:native("dealloc") public function dealloc():Void;
  @:native("debugDescription") public function debugDescription():NSString;
  @:native("description") public function description():NSString;
  @:native("dictionaryWithValuesForKeys") public function dictionaryWithValuesForKeys(keys:Dynamic):Dynamic;
  @:native("didChange:valuesAtIndexes:forKey") public function didChange_valuesAtIndexes_forKey(changeKind:NSKeyValueChange, indexes:NSIndexSet, key:NSString):Void;
  @:native("didChangeValueForKey") public function didChangeValueForKey(key:NSString):Void;
  @:native("didChangeValueForKey:withSetMutation:usingObjects") public function didChangeValueForKey_withSetMutation_usingObjects(key:NSString, mutationKind:NSKeyValueSetMutationKind, objects:NSSet):Void;
  @:native("doesNotRecognizeSelector") public function doesNotRecognizeSelector(aSelector:String):Void;
  @:native("fileManager:shouldProceedAfterError") public function fileManager_shouldProceedAfterError(fm:NSFileManager, errorInfo:NSDictionary):Bool;
  @:native("fileManager:willProcessPath") public function fileManager_willProcessPath(fm:NSFileManager, path:NSString):Void;
  @:native("finalize") public function finalize():Void;
  @:native("forwardInvocation") public function forwardInvocation(anInvocation:NSInvocation):Void;
  @:native("forwardingTargetForSelector") public function forwardingTargetForSelector(aSelector:String):Dynamic;
  @:native("handleQueryWithUnboundKey") public function handleQueryWithUnboundKey(key:NSString):Dynamic;
  @:native("handleTakeValue:forUnboundKey") public function handleTakeValue_forUnboundKey(value:Dynamic, key:NSString):Void;
  @:native("hash") public function hash():Int;
  @:native("indexOfAccessibilityElement") public function indexOfAccessibilityElement(element:Dynamic):Int;
  @:native("init") public function init():NSObject;
  @:native("isAccessibilityElement") public function isAccessibilityElement():Bool;
  @:native("isEqual") public function isEqual(object:Dynamic):Bool;
  @:native("isKindOfClass") public function isKindOfClass(aClass:Dynamic):Bool;
  @:native("isMemberOfClass") public function isMemberOfClass(aClass:Dynamic):Bool;
  @:native("isProxy") public function isProxy():Bool;
  @:native("methodForSelector") public function methodForSelector(aSelector:String):Dynamic;
  @:native("methodSignatureForSelector") public function methodSignatureForSelector(aSelector:String):NSMethodSignature;
  @:native("mutableArrayValueForKey") public function mutableArrayValueForKey(key:NSString):NSMutableArray;
  @:native("mutableArrayValueForKeyPath") public function mutableArrayValueForKeyPath(keyPath:NSString):NSMutableArray;
  @:native("mutableCopy") public function mutableCopy():Dynamic;
  @:native("mutableOrderedSetValueForKey") public function mutableOrderedSetValueForKey(key:NSString):NSMutableOrderedSet;
  @:native("mutableOrderedSetValueForKeyPath") public function mutableOrderedSetValueForKeyPath(keyPath:NSString):NSMutableOrderedSet;
  @:native("mutableSetValueForKey") public function mutableSetValueForKey(key:NSString):NSMutableSet;
  @:native("mutableSetValueForKeyPath") public function mutableSetValueForKeyPath(keyPath:NSString):NSMutableSet;
  @:native("observationInfo") public function observationInfo():Void;
  @:native("observeValueForKeyPath:ofObject:change:context") public function observeValueForKeyPath_ofObject_change_context(keyPath:NSString, object:Dynamic, change:Dynamic /*NSDictionary<NSKeyValueChangeKey,id>*/, context:Void):Void;
  @:native("performSelector") public function performSelector(aSelector:String):Dynamic;
  @:native("performSelector:onThread:withObject:waitUntilDone") public function performSelector_onThread_withObject_waitUntilDone(aSelector:String, thr:NSThread, arg:Dynamic, wait:Bool):Void;
  @:native("performSelector:onThread:withObject:waitUntilDone:modes") public function performSelector_onThread_withObject_waitUntilDone_modes(aSelector:String, thr:NSThread, arg:Dynamic, wait:Bool, array:Dynamic):Void;
  @:native("performSelector:withObject") public function performSelector_withObject(aSelector:String, object:Dynamic):Dynamic;
  @:native("performSelector:withObject:afterDelay") public function performSelector_withObject_afterDelay(aSelector:String, anArgument:Dynamic, delay:Float):Void;
  @:native("performSelector:withObject:afterDelay:inModes") public function performSelector_withObject_afterDelay_inModes(aSelector:String, anArgument:Dynamic, delay:Float, modes:Dynamic /*NSArray<NSRunLoopMode>*/):Void;
  @:native("performSelector:withObject:withObject") public function performSelector_withObject_withObject(aSelector:String, object1:Dynamic, object2:Dynamic):Dynamic;
  @:native("performSelectorInBackground:withObject") public function performSelectorInBackground_withObject(aSelector:String, arg:Dynamic):Void;
  @:native("performSelectorOnMainThread:withObject:waitUntilDone") public function performSelectorOnMainThread_withObject_waitUntilDone(aSelector:String, arg:Dynamic, wait:Bool):Void;
  @:native("performSelectorOnMainThread:withObject:waitUntilDone:modes") public function performSelectorOnMainThread_withObject_waitUntilDone_modes(aSelector:String, arg:Dynamic, wait:Bool, array:Dynamic):Void;
  @:native("prepareForInterfaceBuilder") public function prepareForInterfaceBuilder():Void;
  @:native("provideImageData:bytesPerRow:origin:size:userInfo") public function provideImageData_bytesPerRow_origin_size_userInfo(data:Void, rowbytes:Int, x:Int, y:Int, width:Int, height:Int, info:Dynamic):Void;
  @:native("release") public function release():Void;
  @:native("removeObserver:forKeyPath") public function removeObserver_forKeyPath(observer:NSObject, keyPath:NSString):Void;
  @:native("removeObserver:forKeyPath:context") public function removeObserver_forKeyPath_context(observer:NSObject, keyPath:NSString, context:Void):Void;
  @:native("replacementObjectForCoder") public function replacementObjectForCoder(aCoder:NSCoder):Dynamic;
  @:native("replacementObjectForKeyedArchiver") public function replacementObjectForKeyedArchiver(archiver:NSKeyedArchiver):Dynamic;
  @:native("respondsToSelector") public function respondsToSelector(aSelector:String):Bool;
  @:native("retain") public function retain():NSObject;
  @:native("retainCount") public function retainCount():Int;
  @:native("retainWeakReference") public function retainWeakReference():Bool;
  @:native("self") public function self():NSObject;
  @:native("setAccessibilityActivationPoint") public function setAccessibilityActivationPoint(accessibilityActivationPoint:CGPoint):Void;
  @:native("setAccessibilityCustomActions") public function setAccessibilityCustomActions(accessibilityCustomActions:Dynamic):Void;
  @:native("setAccessibilityCustomRotors") public function setAccessibilityCustomRotors(accessibilityCustomRotors:Dynamic):Void;
  @:native("setAccessibilityElements") public function setAccessibilityElements(accessibilityElements:NSArray):Void;
  @:native("setAccessibilityElementsHidden") public function setAccessibilityElementsHidden(accessibilityElementsHidden:Bool):Void;
  @:native("setAccessibilityFrame") public function setAccessibilityFrame(accessibilityFrame:CGRect):Void;
  @:native("setAccessibilityHeaderElements") public function setAccessibilityHeaderElements(accessibilityHeaderElements:NSArray):Void;
  @:native("setAccessibilityHint") public function setAccessibilityHint(accessibilityHint:NSString):Void;
  @:native("setAccessibilityLabel") public function setAccessibilityLabel(accessibilityLabel:NSString):Void;
  @:native("setAccessibilityLanguage") public function setAccessibilityLanguage(accessibilityLanguage:NSString):Void;
  @:native("setAccessibilityNavigationStyle") public function setAccessibilityNavigationStyle(accessibilityNavigationStyle:UIAccessibilityNavigationStyle):Void;
  @:native("setAccessibilityPath") public function setAccessibilityPath(accessibilityPath:UIBezierPath):Void;
  @:native("setAccessibilityTraits") public function setAccessibilityTraits(accessibilityTraits:Dynamic):Void;
  @:native("setAccessibilityValue") public function setAccessibilityValue(accessibilityValue:NSString):Void;
  @:native("setAccessibilityViewIsModal") public function setAccessibilityViewIsModal(accessibilityViewIsModal:Bool):Void;
  @:native("setIsAccessibilityElement") public function setIsAccessibilityElement(isAccessibilityElement:Bool):Void;
  @:native("setNilValueForKey") public function setNilValueForKey(key:NSString):Void;
  @:native("setObservationInfo") public function setObservationInfo(observationInfo:Void):Void;
  @:native("setShouldGroupAccessibilityChildren") public function setShouldGroupAccessibilityChildren(shouldGroupAccessibilityChildren:Bool):Void;
  @:native("setValue:forKey") public function setValue_forKey(value:Dynamic, key:NSString):Void;
  @:native("setValue:forKeyPath") public function setValue_forKeyPath(value:Dynamic, keyPath:NSString):Void;
  @:native("setValue:forUndefinedKey") public function setValue_forUndefinedKey(value:Dynamic, key:NSString):Void;
  @:native("setValuesForKeysWithDictionary") public function setValuesForKeysWithDictionary(keyedValues:Dynamic):Void;
  @:native("shouldGroupAccessibilityChildren") public function shouldGroupAccessibilityChildren():Bool;
  @:native("storedValueForKey") public function storedValueForKey(key:NSString):Dynamic;
  @:native("superclass") public function superclass():Dynamic;
  @:native("takeStoredValue:forKey") public function takeStoredValue_forKey(value:Dynamic, key:NSString):Void;
  @:native("takeValue:forKey") public function takeValue_forKey(value:Dynamic, key:NSString):Void;
  @:native("takeValue:forKeyPath") public function takeValue_forKeyPath(value:Dynamic, keyPath:NSString):Void;
  @:native("takeValuesFromDictionary") public function takeValuesFromDictionary(properties:NSDictionary):Void;
  @:native("unableToSetNilForKey") public function unableToSetNilForKey(key:NSString):Void;
  @:native("validateValue:forKey:error") public function validateValue_forKey_error(ioValue:Dynamic, inKey:NSString, outError:NSError):Bool;
  @:native("validateValue:forKeyPath:error") public function validateValue_forKeyPath_error(ioValue:Dynamic, inKeyPath:NSString, outError:NSError):Bool;
  @:native("valueForKey") public function valueForKey(key:NSString):Dynamic;
  @:native("valueForKeyPath") public function valueForKeyPath(keyPath:NSString):Dynamic;
  @:native("valueForUndefinedKey") public function valueForUndefinedKey(key:NSString):Dynamic;
  @:native("valuesForKeys") public function valuesForKeys(keys:NSArray):NSDictionary;
  @:native("willChange:valuesAtIndexes:forKey") public function willChange_valuesAtIndexes_forKey(changeKind:NSKeyValueChange, indexes:NSIndexSet, key:NSString):Void;
  @:native("willChangeValueForKey") public function willChangeValueForKey(key:NSString):Void;
  @:native("willChangeValueForKey:withSetMutation:usingObjects") public function willChangeValueForKey_withSetMutation_usingObjects(key:NSString, mutationKind:NSKeyValueSetMutationKind, objects:NSSet):Void;
  @:native("zone") public function zone():Dynamic /*_NSZone*/;
}
