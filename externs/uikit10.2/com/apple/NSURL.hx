package com.apple;

import cpp.objc.NSString;
import cpp.objc.NSDictionary;
import haxe.Int64;

@:objc
@:native("NSURL")
@:include("UIKit/UIKit.h")
extern class NSURL
{
  @:native("initFileURLWithPath:isDirectory") public function initFileURLWithPath_isDirectory(path:NSString, isDir:Dynamic /*Bool*/):NSURL;
  @:native("removeAllCachedResourceValues") public function removeAllCachedResourceValues():Dynamic /*Void*/;
  @:native("getFileSystemRepresentation:maxLength") public function getFileSystemRepresentation_maxLength(buffer:Dynamic /*Int*/, maxBufferLength:Int):Dynamic /*Bool*/;
  @:native("parameterString") public function parameterString():NSString;
  @:native("resourceDataUsingCache") public function resourceDataUsingCache(shouldUseCache:Dynamic /*Bool*/):NSData;
  @:native("getResourceValue:forKey:error") public function getResourceValue_forKey_error(value:Dynamic /*Dynamic*/, key:NSString, error:NSError):Dynamic /*Bool*/;
  @:native("fileURLWithPath:relativeToURL") public static function fileURLWithPath_relativeToURL(path:NSString, baseURL:NSURL):NSURL;
  @:native("absoluteURL") public function absoluteURL():NSURL;
  @:native("URLByDeletingPathExtension") public function URLByDeletingPathExtension():NSURL;
  @:native("resourceValuesForKeys:error") public function resourceValuesForKeys_error(keys:Dynamic /*NSArray<NSURLResourceKey>*/, error:NSError):Dynamic /*NSDictionary<NSURLResourceKey,id>*/;
  @:native("path") public function path():NSString;
  @:native("initWithString") public function initWithString(URLString:NSString):NSURL;
  @:native("initWithDataRepresentation:relativeToURL") public function initWithDataRepresentation_relativeToURL(data:NSData, baseURL:NSURL):NSURL;
  @:native("isFileURL") public function isFileURL():Dynamic /*Bool*/;
  @:native("host") public function host():NSString;
  @:native("checkResourceIsReachableAndReturnError") public function checkResourceIsReachableAndReturnError(error:NSError):Dynamic /*Bool*/;
  @:native("loadResourceDataNotifyingClient:usingCache") public function loadResourceDataNotifyingClient_usingCache(client:Dynamic /*Dynamic*/, shouldUseCache:Dynamic /*Bool*/):Dynamic /*Void*/;
  @:native("fileURLWithPath:isDirectory:relativeToURL") public static function fileURLWithPath_isDirectory_relativeToURL(path:NSString, isDir:Dynamic /*Bool*/, baseURL:NSURL):NSURL;
  @:native("URLByDeletingLastPathComponent") public function URLByDeletingLastPathComponent():NSURL;
  @:native("scheme") public function scheme():NSString;
  @:native("baseURL") public function baseURL():NSURL;
  @:native("getPromisedItemResourceValue:forKey:error") public function getPromisedItemResourceValue_forKey_error(value:Dynamic /*Dynamic*/, key:NSString, error:NSError):Dynamic /*Bool*/;
  @:native("URLHandleUsingCache") public function URLHandleUsingCache(shouldUseCache:Dynamic /*Bool*/):Dynamic /*Dynamic*/;
  @:native("initFileURLWithPath:relativeToURL") public function initFileURLWithPath_relativeToURL(path:NSString, baseURL:NSURL):NSURL;
  @:native("initWithString:relativeToURL") public function initWithString_relativeToURL(URLString:NSString, baseURL:NSURL):NSURL;
  @:native("absoluteURLWithDataRepresentation:relativeToURL") public static function absoluteURLWithDataRepresentation_relativeToURL(data:NSData, baseURL:NSURL):NSURL;
  @:native("removeCachedResourceValueForKey") public function removeCachedResourceValueForKey(key:NSString):Dynamic /*Void*/;
  @:native("promisedItemResourceValuesForKeys:error") public function promisedItemResourceValuesForKeys_error(keys:Dynamic /*NSArray<NSURLResourceKey>*/, error:NSError):Dynamic /*NSDictionary<NSURLResourceKey,id>*/;
  @:native("filePathURL") public function filePathURL():NSURL;
  @:native("setResourceData") public function setResourceData(data:NSData):Dynamic /*Bool*/;
  @:native("initFileURLWithPath:isDirectory:relativeToURL") public function initFileURLWithPath_isDirectory_relativeToURL(path:NSString, isDir:Dynamic /*Bool*/, baseURL:NSURL):NSURL;
  @:native("pathComponents") public function pathComponents():Dynamic /*Dynamic*/;
  @:native("URLByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error") public static function URLByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(bookmarkData:NSData, options:NSURLBookmarkResolutionOptions, relativeURL:NSURL, isStale:Dynamic /*Bool*/, error:NSError):NSURL;
  @:native("autorelease") public function autorelease():NSURL;
  @:native("fileReferenceURL") public function fileReferenceURL():NSURL;
  @:native("initAbsoluteURLWithDataRepresentation:relativeToURL") public function initAbsoluteURLWithDataRepresentation_relativeToURL(data:NSData, baseURL:NSURL):NSURL;
  @:native("URLByResolvingAliasFileAtURL:options:error") public static function URLByResolvingAliasFileAtURL_options_error(url:NSURL, options:NSURLBookmarkResolutionOptions, error:NSError):NSURL;
  @:native("port") public function port():NSNumber;
  @:native("resourceValuesForKeys:fromBookmarkData") public static function resourceValuesForKeys_fromBookmarkData(keys:Dynamic /*NSArray<NSURLResourceKey>*/, bookmarkData:NSData):Dynamic /*NSDictionary<NSURLResourceKey,id>*/;
  @:native("checkPromisedItemIsReachableAndReturnError") public function checkPromisedItemIsReachableAndReturnError(error:NSError):Dynamic /*Bool*/;
  @:native("fileURLWithPath:isDirectory") public static function fileURLWithPath_isDirectory(path:NSString, isDir:Dynamic /*Bool*/):NSURL;
  @:native("URLByAppendingPathComponent:isDirectory") public function URLByAppendingPathComponent_isDirectory(pathComponent:NSString, isDirectory:Dynamic /*Bool*/):NSURL;
  @:native("URLWithString") public static function URLWithString(URLString:NSString):NSURL;
  @:native("isFileReferenceURL") public function isFileReferenceURL():Dynamic /*Bool*/;
  @:native("stopAccessingSecurityScopedResource") public function stopAccessingSecurityScopedResource():Dynamic /*Void*/;
  @:native("lastPathComponent") public function lastPathComponent():NSString;
  @:native("propertyForKey") public function propertyForKey(propertyKey:NSString):Dynamic /*Dynamic*/;
  @:native("URLByAppendingPathExtension") public function URLByAppendingPathExtension(pathExtension:NSString):NSURL;
  @:native("relativePath") public function relativePath():NSString;
  @:native("initFileURLWithPath") public function initFileURLWithPath(path:NSString):NSURL;
  @:native("startAccessingSecurityScopedResource") public function startAccessingSecurityScopedResource():Dynamic /*Bool*/;
  @:native("pathExtension") public function pathExtension():NSString;
  @:native("initWithScheme:host:path") public function initWithScheme_host_path(scheme:NSString, host:NSString, path:NSString):NSURL;
  @:native("setTemporaryResourceValue:forKey") public function setTemporaryResourceValue_forKey(value:Dynamic /*Dynamic*/, key:NSString):Dynamic /*Void*/;
  @:native("fragment") public function fragment():NSString;
  @:native("fileSystemRepresentation") public function fileSystemRepresentation():Dynamic /*Dynamic*/;
  @:native("setProperty:forKey") public function setProperty_forKey(property:Dynamic /*Dynamic*/, propertyKey:NSString):Dynamic /*Bool*/;
  @:native("URLWithDataRepresentation:relativeToURL") public static function URLWithDataRepresentation_relativeToURL(data:NSData, baseURL:NSURL):NSURL;
  @:native("bookmarkDataWithContentsOfURL:error") public static function bookmarkDataWithContentsOfURL_error(bookmarkFileURL:NSURL, error:NSError):NSData;
  @:native("standardizedURL") public function standardizedURL():NSURL;
  @:native("query") public function query():NSString;
  @:native("initByResolvingBookmarkData:options:relativeToURL:bookmarkDataIsStale:error") public function initByResolvingBookmarkData_options_relativeToURL_bookmarkDataIsStale_error(bookmarkData:NSData, options:NSURLBookmarkResolutionOptions, relativeURL:NSURL, isStale:Dynamic /*Bool*/, error:NSError):NSURL;
  @:native("relativeString") public function relativeString():NSString;
  @:native("fileURLWithPath") public static function fileURLWithPath(path:NSString):NSURL;
  @:native("bookmarkDataWithOptions:includingResourceValuesForKeys:relativeToURL:error") public function bookmarkDataWithOptions_includingResourceValuesForKeys_relativeToURL_error(options:NSURLBookmarkCreationOptions, keys:Dynamic /*NSArray<NSURLResourceKey>*/, relativeURL:NSURL, error:NSError):NSData;
  @:native("URLByAppendingPathComponent") public function URLByAppendingPathComponent(pathComponent:NSString):NSURL;
  @:native("setResourceValue:forKey:error") public function setResourceValue_forKey_error(value:Dynamic /*Dynamic*/, key:NSString, error:NSError):Dynamic /*Bool*/;
  @:native("user") public function user():NSString;
  @:native("password") public function password():NSString;
  @:native("fileURLWithPathComponents") public static function fileURLWithPathComponents(components:Dynamic /*Dynamic*/):NSURL;
  @:native("writeBookmarkData:toURL:options:error") public static function writeBookmarkData_toURL_options_error(bookmarkData:NSData, bookmarkFileURL:NSURL, options:Int, error:NSError):Dynamic /*Bool*/;
  @:native("URLByStandardizingPath") public function URLByStandardizingPath():NSURL;
  @:native("initFileURLWithFileSystemRepresentation:isDirectory:relativeToURL") public function initFileURLWithFileSystemRepresentation_isDirectory_relativeToURL(path:Dynamic /*Dynamic*/, isDir:Dynamic /*Bool*/, baseURL:NSURL):NSURL;
  @:native("fileURLWithFileSystemRepresentation:isDirectory:relativeToURL") public static function fileURLWithFileSystemRepresentation_isDirectory_relativeToURL(path:Dynamic /*Dynamic*/, isDir:Dynamic /*Bool*/, baseURL:NSURL):NSURL;
  @:native("absoluteString") public function absoluteString():NSString;
  @:native("resourceSpecifier") public function resourceSpecifier():NSString;
  @:native("hasDirectoryPath") public function hasDirectoryPath():Dynamic /*Bool*/;
  @:native("alloc") public static function alloc():NSURL;
  @:native("dataRepresentation") public function dataRepresentation():NSData;
  @:native("URLByResolvingSymlinksInPath") public function URLByResolvingSymlinksInPath():NSURL;
  @:native("URLWithString:relativeToURL") public static function URLWithString_relativeToURL(URLString:NSString, baseURL:NSURL):NSURL;
  @:native("setResourceValues:error") public function setResourceValues_error(keyedValues:Dynamic /*NSDictionary<NSURLResourceKey,id>*/, error:NSError):Dynamic /*Bool*/;
}
