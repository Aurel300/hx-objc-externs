package com.apple;

import cpp.objc.NSString;
import cpp.objc.NSDictionary;
import haxe.Int64;

@:objc
@:native("UIView")
@:include("UIKit/UIKit.h")
extern class UIView
extends UIResponder
implements cpp.objc.Protocol<NSCoding>
implements cpp.objc.Protocol<UIAppearance>
implements cpp.objc.Protocol<UIAppearanceContainer>
implements cpp.objc.Protocol<UIDynamicItem>
implements cpp.objc.Protocol<UITraitEnvironment>
implements cpp.objc.Protocol<UICoordinateSpace>
implements cpp.objc.Protocol<UIFocusItem>
implements cpp.objc.Protocol<CALayerDelegate>
implements cpp.objc.Protocol<UIAccessibilityIdentification>
{
  /* Implicit from UIAccessibilityIdentification */ @:native("accessibilityIdentifier") public function accessibilityIdentifier():NSString;
  /* Implicit from CALayerDelegate */ @:native("actionForLayer:forKey") public function actionForLayer_forKey(layer:CALayer, event:NSString):CAAction;
  @:native("addConstraint") public function addConstraint(constraint:NSLayoutConstraint):Void;
  @:native("addConstraints") public function addConstraints(constraints:Dynamic):Void;
  @:native("addGestureRecognizer") public function addGestureRecognizer(gestureRecognizer:UIGestureRecognizer):Void;
  @:native("addKeyframeWithRelativeStartTime:relativeDuration:animations") public static function addKeyframeWithRelativeStartTime_relativeDuration_animations(frameStartTime:Float, frameDuration:Float, animations:Dynamic):Void;
  @:native("addLayoutGuide") public function addLayoutGuide(layoutGuide:UILayoutGuide):Void;
  @:native("addMotionEffect") public function addMotionEffect(effect:UIMotionEffect):Void;
  @:native("addSubview") public function addSubview(view:UIView):Void;
  @:native("alignmentRectForFrame") public function alignmentRectForFrame(frame:CGRect):CGRect;
  @:native("alignmentRectInsets") public function alignmentRectInsets():UIEdgeInsets;
  @:native("alloc") public static function alloc():UIView;
  @:native("alpha") public function alpha():Float;
  @:native("animateKeyframesWithDuration:delay:options:animations:completion") public static function animateKeyframesWithDuration_delay_options_animations_completion(duration:Float, delay:Float, options:UIViewKeyframeAnimationOptions, animations:Dynamic, completion:Dynamic):Void;
  @:native("animateWithDuration:animations") public static function animateWithDuration_animations(duration:Float, animations:Dynamic):Void;
  @:native("animateWithDuration:animations:completion") public static function animateWithDuration_animations_completion(duration:Float, animations:Dynamic, completion:Dynamic):Void;
  @:native("animateWithDuration:delay:options:animations:completion") public static function animateWithDuration_delay_options_animations_completion(duration:Float, delay:Float, options:UIViewAnimationOptions, animations:Dynamic, completion:Dynamic):Void;
  @:native("animateWithDuration:delay:usingSpringWithDamping:initialSpringVelocity:options:animations:completion") public static function animateWithDuration_delay_usingSpringWithDamping_initialSpringVelocity_options_animations_completion(duration:Float, delay:Float, dampingRatio:Float, velocity:Float, options:UIViewAnimationOptions, animations:Dynamic, completion:Dynamic):Void;
  @:native("areAnimationsEnabled") public static function areAnimationsEnabled():Bool;
  @:overload(function():UIView {})
  @:native("autorelease") override public function autorelease():UIResponder;
  @:native("autoresizesSubviews") public function autoresizesSubviews():Bool;
  @:native("autoresizingMask") public function autoresizingMask():UIViewAutoresizing;
  @:native("backgroundColor") public function backgroundColor():UIColor;
  @:native("beginAnimations:context") public static function beginAnimations_context(animationID:NSString, context:Void):Void;
  @:native("bottomAnchor") public function bottomAnchor():NSLayoutYAxisAnchor;
  @:native("bounds") public function bounds():CGRect;
  @:native("bringSubviewToFront") public function bringSubviewToFront(view:UIView):Void;
  @:native("canBecomeFocused") public function canBecomeFocused():Bool;
  @:native("center") public function center():CGPoint;
  @:native("centerXAnchor") public function centerXAnchor():NSLayoutXAxisAnchor;
  @:native("centerYAnchor") public function centerYAnchor():NSLayoutYAxisAnchor;
  @:native("clearsContextBeforeDrawing") public function clearsContextBeforeDrawing():Bool;
  @:native("clipsToBounds") public function clipsToBounds():Bool;
  /* Implicit from UIDynamicItem */ @:native("collisionBoundingPath") public function collisionBoundingPath():UIBezierPath;
  /* Implicit from UIDynamicItem */ @:native("collisionBoundsType") public function collisionBoundsType():UIDynamicItemCollisionBoundsType;
  @:native("commitAnimations") public static function commitAnimations():Void;
  @:native("constraints") public function constraints():Dynamic;
  @:native("constraintsAffectingLayoutForAxis") public function constraintsAffectingLayoutForAxis(axis:UILayoutConstraintAxis):Dynamic;
  @:native("contentCompressionResistancePriorityForAxis") public function contentCompressionResistancePriorityForAxis(axis:UILayoutConstraintAxis):Float;
  @:native("contentHuggingPriorityForAxis") public function contentHuggingPriorityForAxis(axis:UILayoutConstraintAxis):Float;
  @:native("contentMode") public function contentMode():UIViewContentMode;
  @:native("contentScaleFactor") public function contentScaleFactor():Float;
  @:native("contentStretch") public function contentStretch():CGRect;
  /* Implicit from UICoordinateSpace */ @:native("convertPoint:fromCoordinateSpace") public function convertPoint_fromCoordinateSpace(point:CGPoint, coordinateSpace:UICoordinateSpace):CGPoint;
  @:native("convertPoint:fromView") public function convertPoint_fromView(point:CGPoint, view:UIView):CGPoint;
  /* Implicit from UICoordinateSpace */ @:native("convertPoint:toCoordinateSpace") public function convertPoint_toCoordinateSpace(point:CGPoint, coordinateSpace:UICoordinateSpace):CGPoint;
  @:native("convertPoint:toView") public function convertPoint_toView(point:CGPoint, view:UIView):CGPoint;
  /* Implicit from UICoordinateSpace */ @:native("convertRect:fromCoordinateSpace") public function convertRect_fromCoordinateSpace(rect:CGRect, coordinateSpace:UICoordinateSpace):CGRect;
  @:native("convertRect:fromView") public function convertRect_fromView(rect:CGRect, view:UIView):CGRect;
  /* Implicit from UICoordinateSpace */ @:native("convertRect:toCoordinateSpace") public function convertRect_toCoordinateSpace(rect:CGRect, coordinateSpace:UICoordinateSpace):CGRect;
  @:native("convertRect:toView") public function convertRect_toView(rect:CGRect, view:UIView):CGRect;
  @:native("decodeRestorableStateWithCoder") public function decodeRestorableStateWithCoder(coder:NSCoder):Void;
  @:native("didAddSubview") public function didAddSubview(subview:UIView):Void;
  @:native("didMoveToSuperview") public function didMoveToSuperview():Void;
  @:native("didMoveToWindow") public function didMoveToWindow():Void;
  /* Implicit from UIFocusEnvironment */ @:native("didUpdateFocusInContext:withAnimationCoordinator") public function didUpdateFocusInContext_withAnimationCoordinator(context:UIFocusUpdateContext, coordinator:UIFocusAnimationCoordinator):Void;
  /* Implicit from CALayerDelegate */ @:native("displayLayer") public function displayLayer(layer:CALayer):Void;
  /* Implicit from CALayerDelegate */ @:native("drawLayer:inContext") public function drawLayer_inContext(layer:CALayer, ctx:CGContext):Void;
  @:native("drawRect") public function drawRect(rect:CGRect):Void;
  @:native("drawRect:forViewPrintFormatter") public function drawRect_forViewPrintFormatter(rect:CGRect, formatter:UIViewPrintFormatter):Void;
  @:native("drawViewHierarchyInRect:afterScreenUpdates") public function drawViewHierarchyInRect_afterScreenUpdates(rect:CGRect, afterUpdates:Bool):Bool;
  @:native("effectiveUserInterfaceLayoutDirection") public function effectiveUserInterfaceLayoutDirection():UIUserInterfaceLayoutDirection;
  @:native("encodeRestorableStateWithCoder") public function encodeRestorableStateWithCoder(coder:NSCoder):Void;
  /* Implicit from NSCoding */ @:native("encodeWithCoder") public function encodeWithCoder(aCoder:NSCoder):Void;
  @:native("endEditing") public function endEditing(force:Bool):Bool;
  @:native("exchangeSubviewAtIndex:withSubviewAtIndex") public function exchangeSubviewAtIndex_withSubviewAtIndex(index1:Int, index2:Int):Void;
  @:native("exerciseAmbiguityInLayout") public function exerciseAmbiguityInLayout():Void;
  @:native("firstBaselineAnchor") public function firstBaselineAnchor():NSLayoutYAxisAnchor;
  @:native("frame") public function frame():CGRect;
  @:native("frameForAlignmentRect") public function frameForAlignmentRect(alignmentRect:CGRect):CGRect;
  @:native("gestureRecognizerShouldBegin") public function gestureRecognizerShouldBegin(gestureRecognizer:UIGestureRecognizer):Bool;
  @:native("gestureRecognizers") public function gestureRecognizers():Dynamic;
  @:native("hasAmbiguousLayout") public function hasAmbiguousLayout():Bool;
  @:native("heightAnchor") public function heightAnchor():NSLayoutDimension;
  @:native("hitTest:withEvent") public function hitTest_withEvent(point:CGPoint, event:UIEvent):UIView;
  @:native("inheritedAnimationDuration") public static function inheritedAnimationDuration():Float;
  @:native("initWithCoder") public function initWithCoder(aDecoder:NSCoder):UIView;
  @:native("initWithFrame") public function initWithFrame(frame:CGRect):UIView;
  @:native("insertSubview:aboveSubview") public function insertSubview_aboveSubview(view:UIView, siblingSubview:UIView):Void;
  @:native("insertSubview:atIndex") public function insertSubview_atIndex(view:UIView, index:Int):Void;
  @:native("insertSubview:belowSubview") public function insertSubview_belowSubview(view:UIView, siblingSubview:UIView):Void;
  @:native("intrinsicContentSize") public function intrinsicContentSize():CGSize;
  @:native("invalidateIntrinsicContentSize") public function invalidateIntrinsicContentSize():Void;
  @:native("isDescendantOfView") public function isDescendantOfView(view:UIView):Bool;
  @:native("isExclusiveTouch") public function isExclusiveTouch():Bool;
  @:native("isFocused") public function isFocused():Bool;
  @:native("isHidden") public function isHidden():Bool;
  @:native("isMultipleTouchEnabled") public function isMultipleTouchEnabled():Bool;
  @:native("isOpaque") public function isOpaque():Bool;
  @:native("isUserInteractionEnabled") public function isUserInteractionEnabled():Bool;
  @:native("lastBaselineAnchor") public function lastBaselineAnchor():NSLayoutYAxisAnchor;
  @:native("layer") public function layer():CALayer;
  @:native("layerClass") public static function layerClass():Dynamic;
  /* Implicit from CALayerDelegate */ @:native("layerWillDraw") public function layerWillDraw(layer:CALayer):Void;
  @:native("layoutGuides") public function layoutGuides():Dynamic;
  @:native("layoutIfNeeded") public function layoutIfNeeded():Void;
  @:native("layoutMargins") public function layoutMargins():UIEdgeInsets;
  @:native("layoutMarginsDidChange") public function layoutMarginsDidChange():Void;
  @:native("layoutMarginsGuide") public function layoutMarginsGuide():UILayoutGuide;
  /* Implicit from CALayerDelegate */ @:native("layoutSublayersOfLayer") public function layoutSublayersOfLayer(layer:CALayer):Void;
  @:native("layoutSubviews") public function layoutSubviews():Void;
  @:native("leadingAnchor") public function leadingAnchor():NSLayoutXAxisAnchor;
  @:native("leftAnchor") public function leftAnchor():NSLayoutXAxisAnchor;
  @:native("maskView") public function maskView():UIView;
  @:native("motionEffects") public function motionEffects():Dynamic;
  @:native("needsUpdateConstraints") public function needsUpdateConstraints():Bool;
  @:native("performSystemAnimation:onViews:options:animations:completion") public static function performSystemAnimation_onViews_options_animations_completion(animation:UISystemAnimation, views:Dynamic, options:UIViewAnimationOptions, parallelAnimations:Dynamic, completion:Dynamic):Void;
  @:native("performWithoutAnimation") public static function performWithoutAnimation(actionsWithoutAnimation:Dynamic):Void;
  @:native("pointInside:withEvent") public function pointInside_withEvent(point:CGPoint, event:UIEvent):Bool;
  /* Implicit from UIFocusEnvironment */ @:native("preferredFocusEnvironments") public function preferredFocusEnvironments():Dynamic /*NSArray<id<UIFocusEnvironment>>*/;
  /* Implicit from UIFocusEnvironment */ @:native("preferredFocusedView") public function preferredFocusedView():UIView;
  @:native("preservesSuperviewLayoutMargins") public function preservesSuperviewLayoutMargins():Bool;
  @:native("readableContentGuide") public function readableContentGuide():UILayoutGuide;
  @:native("removeConstraint") public function removeConstraint(constraint:NSLayoutConstraint):Void;
  @:native("removeConstraints") public function removeConstraints(constraints:Dynamic):Void;
  @:native("removeFromSuperview") public function removeFromSuperview():Void;
  @:native("removeGestureRecognizer") public function removeGestureRecognizer(gestureRecognizer:UIGestureRecognizer):Void;
  @:native("removeLayoutGuide") public function removeLayoutGuide(layoutGuide:UILayoutGuide):Void;
  @:native("removeMotionEffect") public function removeMotionEffect(effect:UIMotionEffect):Void;
  @:native("requiresConstraintBasedLayout") public static function requiresConstraintBasedLayout():Bool;
  @:native("resizableSnapshotViewFromRect:afterScreenUpdates:withCapInsets") public function resizableSnapshotViewFromRect_afterScreenUpdates_withCapInsets(rect:CGRect, afterUpdates:Bool, capInsets:UIEdgeInsets):UIView;
  @:native("restorationIdentifier") public function restorationIdentifier():NSString;
  @:native("rightAnchor") public function rightAnchor():NSLayoutXAxisAnchor;
  @:native("semanticContentAttribute") public function semanticContentAttribute():UISemanticContentAttribute;
  @:native("sendSubviewToBack") public function sendSubviewToBack(view:UIView):Void;
  /* Implicit from UIAccessibilityIdentification */ @:native("setAccessibilityIdentifier") public function setAccessibilityIdentifier(accessibilityIdentifier:NSString):Void;
  @:native("setAlpha") public function setAlpha(alpha:Float):Void;
  @:native("setAnimationBeginsFromCurrentState") public static function setAnimationBeginsFromCurrentState(fromCurrentState:Bool):Void;
  @:native("setAnimationCurve") public static function setAnimationCurve(curve:UIViewAnimationCurve):Void;
  @:native("setAnimationDelay") public static function setAnimationDelay(delay:Float):Void;
  @:native("setAnimationDelegate") public static function setAnimationDelegate(delegate:Dynamic):Void;
  @:native("setAnimationDidStopSelector") public static function setAnimationDidStopSelector(selector:String):Void;
  @:native("setAnimationDuration") public static function setAnimationDuration(duration:Float):Void;
  @:native("setAnimationRepeatAutoreverses") public static function setAnimationRepeatAutoreverses(repeatAutoreverses:Bool):Void;
  @:native("setAnimationRepeatCount") public static function setAnimationRepeatCount(repeatCount:Float):Void;
  @:native("setAnimationStartDate") public static function setAnimationStartDate(startDate:NSDate):Void;
  @:native("setAnimationTransition:forView:cache") public static function setAnimationTransition_forView_cache(transition:UIViewAnimationTransition, view:UIView, cache:Bool):Void;
  @:native("setAnimationWillStartSelector") public static function setAnimationWillStartSelector(selector:String):Void;
  @:native("setAnimationsEnabled") public static function setAnimationsEnabled(enabled:Bool):Void;
  @:native("setAutoresizesSubviews") public function setAutoresizesSubviews(autoresizesSubviews:Bool):Void;
  @:native("setAutoresizingMask") public function setAutoresizingMask(autoresizingMask:UIViewAutoresizing):Void;
  @:native("setBackgroundColor") public function setBackgroundColor(backgroundColor:UIColor):Void;
  @:native("setBounds") public function setBounds(bounds:CGRect):Void;
  @:native("setCenter") public function setCenter(center:CGPoint):Void;
  @:native("setClearsContextBeforeDrawing") public function setClearsContextBeforeDrawing(clearsContextBeforeDrawing:Bool):Void;
  @:native("setClipsToBounds") public function setClipsToBounds(clipsToBounds:Bool):Void;
  @:native("setContentCompressionResistancePriority:forAxis") public function setContentCompressionResistancePriority_forAxis(priority:Float, axis:UILayoutConstraintAxis):Void;
  @:native("setContentHuggingPriority:forAxis") public function setContentHuggingPriority_forAxis(priority:Float, axis:UILayoutConstraintAxis):Void;
  @:native("setContentMode") public function setContentMode(contentMode:UIViewContentMode):Void;
  @:native("setContentScaleFactor") public function setContentScaleFactor(contentScaleFactor:Float):Void;
  @:native("setContentStretch") public function setContentStretch(contentStretch:CGRect):Void;
  @:native("setExclusiveTouch") public function setExclusiveTouch(exclusiveTouch:Bool):Void;
  @:native("setFrame") public function setFrame(frame:CGRect):Void;
  @:native("setGestureRecognizers") public function setGestureRecognizers(gestureRecognizers:Dynamic):Void;
  @:native("setHidden") public function setHidden(hidden:Bool):Void;
  @:native("setLayoutMargins") public function setLayoutMargins(layoutMargins:UIEdgeInsets):Void;
  @:native("setMaskView") public function setMaskView(maskView:UIView):Void;
  @:native("setMotionEffects") public function setMotionEffects(motionEffects:Dynamic):Void;
  @:native("setMultipleTouchEnabled") public function setMultipleTouchEnabled(multipleTouchEnabled:Bool):Void;
  @:native("setNeedsDisplay") public function setNeedsDisplay():Void;
  @:native("setNeedsDisplayInRect") public function setNeedsDisplayInRect(rect:CGRect):Void;
  /* Implicit from UIFocusEnvironment */ @:native("setNeedsFocusUpdate") public function setNeedsFocusUpdate():Void;
  @:native("setNeedsLayout") public function setNeedsLayout():Void;
  @:native("setNeedsUpdateConstraints") public function setNeedsUpdateConstraints():Void;
  @:native("setOpaque") public function setOpaque(opaque:Bool):Void;
  @:native("setPreservesSuperviewLayoutMargins") public function setPreservesSuperviewLayoutMargins(preservesSuperviewLayoutMargins:Bool):Void;
  @:native("setRestorationIdentifier") public function setRestorationIdentifier(restorationIdentifier:NSString):Void;
  @:native("setSemanticContentAttribute") public function setSemanticContentAttribute(semanticContentAttribute:UISemanticContentAttribute):Void;
  @:native("setTag") public function setTag(tag:Int):Void;
  @:native("setTintAdjustmentMode") public function setTintAdjustmentMode(tintAdjustmentMode:UIViewTintAdjustmentMode):Void;
  @:native("setTintColor") public function setTintColor(tintColor:UIColor):Void;
  @:native("setTransform") public function setTransform(transform:CGAffineTransform):Void;
  @:native("setTranslatesAutoresizingMaskIntoConstraints") public function setTranslatesAutoresizingMaskIntoConstraints(translatesAutoresizingMaskIntoConstraints:Bool):Void;
  @:native("setUserInteractionEnabled") public function setUserInteractionEnabled(userInteractionEnabled:Bool):Void;
  /* Implicit from UIFocusEnvironment */ @:native("shouldUpdateFocusInContext") public function shouldUpdateFocusInContext(context:UIFocusUpdateContext):Bool;
  @:native("sizeThatFits") public function sizeThatFits(size:CGSize):CGSize;
  @:native("sizeToFit") public function sizeToFit():Void;
  @:native("snapshotViewAfterScreenUpdates") public function snapshotViewAfterScreenUpdates(afterUpdates:Bool):UIView;
  @:native("subviews") public function subviews():Dynamic;
  @:native("superview") public function superview():UIView;
  @:native("systemLayoutSizeFittingSize") public function systemLayoutSizeFittingSize(targetSize:CGSize):CGSize;
  @:native("systemLayoutSizeFittingSize:withHorizontalFittingPriority:verticalFittingPriority") public function systemLayoutSizeFittingSize_withHorizontalFittingPriority_verticalFittingPriority(targetSize:CGSize, horizontalFittingPriority:Float, verticalFittingPriority:Float):CGSize;
  @:native("tag") public function tag():Int;
  @:native("tintAdjustmentMode") public function tintAdjustmentMode():UIViewTintAdjustmentMode;
  @:native("tintColor") public function tintColor():UIColor;
  @:native("tintColorDidChange") public function tintColorDidChange():Void;
  @:native("topAnchor") public function topAnchor():NSLayoutYAxisAnchor;
  @:native("trailingAnchor") public function trailingAnchor():NSLayoutXAxisAnchor;
  /* Implicit from UITraitEnvironment */ @:native("traitCollection") public function traitCollection():UITraitCollection;
  /* Implicit from UITraitEnvironment */ @:native("traitCollectionDidChange") public function traitCollectionDidChange(previousTraitCollection:UITraitCollection):Void;
  @:native("transform") public function transform():CGAffineTransform;
  @:native("transitionFromView:toView:duration:options:completion") public static function transitionFromView_toView_duration_options_completion(fromView:UIView, toView:UIView, duration:Float, options:UIViewAnimationOptions, completion:Dynamic):Void;
  @:native("transitionWithView:duration:options:animations:completion") public static function transitionWithView_duration_options_animations_completion(view:UIView, duration:Float, options:UIViewAnimationOptions, animations:Dynamic, completion:Dynamic):Void;
  @:native("translatesAutoresizingMaskIntoConstraints") public function translatesAutoresizingMaskIntoConstraints():Bool;
  @:native("updateConstraints") public function updateConstraints():Void;
  @:native("updateConstraintsIfNeeded") public function updateConstraintsIfNeeded():Void;
  /* Implicit from UIFocusEnvironment */ @:native("updateFocusIfNeeded") public function updateFocusIfNeeded():Void;
  @:native("userInterfaceLayoutDirectionForSemanticContentAttribute") public static function userInterfaceLayoutDirectionForSemanticContentAttribute(attribute:UISemanticContentAttribute):UIUserInterfaceLayoutDirection;
  @:native("userInterfaceLayoutDirectionForSemanticContentAttribute:relativeToLayoutDirection") public static function userInterfaceLayoutDirectionForSemanticContentAttribute_relativeToLayoutDirection(semanticContentAttribute:UISemanticContentAttribute, layoutDirection:UIUserInterfaceLayoutDirection):UIUserInterfaceLayoutDirection;
  @:native("viewForBaselineLayout") public function viewForBaselineLayout():UIView;
  @:native("viewForFirstBaselineLayout") public function viewForFirstBaselineLayout():UIView;
  @:native("viewForLastBaselineLayout") public function viewForLastBaselineLayout():UIView;
  @:native("viewPrintFormatter") public function viewPrintFormatter():UIViewPrintFormatter;
  @:native("viewWithTag") public function viewWithTag(tag:Int):Dynamic;
  @:native("widthAnchor") public function widthAnchor():NSLayoutDimension;
  @:native("willMoveToSuperview") public function willMoveToSuperview(newSuperview:UIView):Void;
  @:native("willMoveToWindow") public function willMoveToWindow(newWindow:UIWindow):Void;
  @:native("willRemoveSubview") public function willRemoveSubview(subview:UIView):Void;
  @:native("window") public function window():UIWindow;
}
